# Importing necessary modules
import streamlit as st

# Page's main configuration
st.set_page_config(page_title='PyCharm', page_icon='üêç', layout='wide')

# Page's header
st.title('üì∞ Blog')
st.divider()

with st.expander('PyCharm Professional'):
    # Hiding humburguer menu
    hide_st_style = """
                <style>
                #MainMenu {visibility: hidden;}
                footer {visibility: hidden;}
                header {visibility: hidden;}
                </style>
                """
    st.markdown(hide_st_style, unsafe_allow_html=True)

    # Page's content

    ## Definition
    st.markdown("""
    # üêç Por que escolhi o **PyCharm** como minha IDE profissional de desenvolvimento Python?
    
    Ao longo da minha jornada com Python, explorei diversas op√ß√µes de ambientes de desenvolvimento integrados (IDEs). Ap√≥s avaliar criteriosamente fatores como produtividade, recursos integrados, suporte a projetos complexos e experi√™ncia do usu√°rio, optei por adotar o **PyCharm** como minha IDE principal. Abaixo, explico as raz√µes por tr√°s dessa escolha.
    
    ---
    
    ## üîç O que √© o PyCharm?
    
    O **PyCharm** √© uma IDE (Ambiente de Desenvolvimento Integrado) totalmente focada na linguagem **Python**. Desenvolvido pela JetBrains, ele foi projetado para oferecer suporte completo ao ciclo de vida do desenvolvimento Python ‚Äî desde projetos simples at√© aplica√ß√µes complexas em √°reas como **Data Science**, **desenvolvimento web**, automa√ß√£o e muito mais.
    
    Sua interface intuitiva e os diversos recursos nativos tornam o desenvolvimento mais fluido, produtivo e organizado.
    
    ---
    
    ## ‚úÖ Principais Motivos da Escolha
    
    1. **Ambientes virtuais integrados de forma eficiente:**  
       Assim como o VS Code, o PyCharm permite criar e gerenciar ambientes virtuais por projeto. Por√©m, sua interface oferece uma visualiza√ß√£o mais clara e organizada da estrutura de pastas e arquivos, o que facilita o gerenciamento de depend√™ncias e configura√ß√µes espec√≠ficas de cada projeto.
    
    2. **Ferramentas nativas poderosas:**  
       O PyCharm possui recursos robustos como **debugger visual**, **testes automatizados**, **autoimporta√ß√£o de bibliotecas**, **refatora√ß√£o inteligente**, **complementa√ß√£o de c√≥digo** e **integra√ß√£o com bancos de dados** ‚Äî tudo isso sem a necessidade de instalar dezenas de extens√µes, como ocorre em outras IDEs.
    
    3. **Foco total em Python:**  
       Por ser especializado em Python, o PyCharm oferece suporte superior para frameworks como Django, Flask e FastAPI, al√©m de bibliotecas populares de ci√™ncia de dados, como NumPy, Pandas, Matplotlib e Scikit-Learn.
    
    4. **Integra√ß√£o com controle de vers√£o (Git):**  
       O controle de vers√µes com Git √© totalmente integrado e facilita a visualiza√ß√£o de altera√ß√µes, commits e gerenciamento de branches diretamente pela interface.
    
    5. **Confiabilidade e estabilidade:**  
       Como ferramenta madura e consolidada no mercado, o PyCharm proporciona uma experi√™ncia est√°vel, com atualiza√ß√µes frequentes e suporte t√©cnico s√≥lido da JetBrains.
    
    ---
    
    ## üß© Conclus√£o
    
    Em resumo, escolhi o **PyCharm** porque ele me proporciona um ambiente de trabalho mais completo, organizado e eficiente. Com ele, consigo manter um alto padr√£o de qualidade nos meus projetos Python e garantir maior produtividade no meu dia a dia profissional.    
    """)
